@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Virtualized list</h1>
    <button @onclick="this.ToggleVirtualizedList">
        @(this.showVirtualizedList ? "Hide" : "Show")
    </button>
    @if (this.showVirtualizedList)
    {
        <Virtualize Items="forecasts" Context="forecast">
            <div>
                <span>@forecast.Date.ToShortDateString()</span>
                <span>@forecast.TemperatureC</span>
                <span>@forecast.TemperatureF</span>
                <span>@forecast.Summary</span>
            </div>
        </Virtualize>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            <h1>For each list</h1>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool showVirtualizedList = false;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private void ToggleVirtualizedList()
    {
        this.showVirtualizedList = !this.showVirtualizedList;
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
